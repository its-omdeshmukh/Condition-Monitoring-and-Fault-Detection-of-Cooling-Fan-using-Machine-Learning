import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import accuracy_score
from sklearn.impute import SimpleImputer
from sklearn.ensemble import HistGradientBoostingClassifier
import matplotlib.pyplot as plt

# Load normal data from CSV
normal_data = pd.read_csv(r'C:\Users\omdes\OneDrive\Desktop\BE Projct\Final Dataset\Data 1100 RPM.csv')

# Load faulty data from CSV
faulty_data = pd.read_csv(r'C:\Users\omdes\OneDrive\Desktop\BE Projct\Final Dataset\Faulty Data 1100 RPM.csv')

# Split the data into features (accelerations) and labels (normal/faulty)
normal_features = normal_data[['Normalacc1', 'Normalacc2']]
faulty_features = faulty_data[['Faultyacc1', 'Faultyacc2']]

# Create labels: 0 for normal, 1 for faulty
normal_labels = pd.Series([0] * len(normal_features))
faulty_labels = pd.Series([1] * len(faulty_features))

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(
    pd.concat([normal_features, faulty_features]),  # Concatenate features
    pd.concat([normal_labels, faulty_labels]),  # Concatenate labels
    test_size=0.2, random_state=42
)

# Handle missing values by imputation
imputer = SimpleImputer(strategy='mean')
X_train_imputed = imputer.fit_transform(X_train)
X_test_imputed = imputer.transform(X_test)

# Train a HistGradientBoostingClassifier
classifier = HistGradientBoostingClassifier()
classifier.fit(X_train_imputed, y_train)

# Make predictions on the test set
predictions = classifier.predict(X_test_imputed)

# Evaluate the accuracy of the classifier
accuracy = accuracy_score(y_test, predictions)
print("Accuracy:", accuracy)

# Histogram of Faultyacc1
plt.hist(faulty_data['Faultyacc1'], bins=20, color='red', alpha=0.7, label='Faulty')
plt.xlabel('Faultyacc1')
plt.ylabel('Frequency')
plt.legend()
plt.title('Histogram of Faultyacc1')
plt.show()

# Histogram of Faultyacc2
plt.hist(faulty_data['Faultyacc2'], bins=20, color='red', alpha=0.7, label='Faulty')
plt.xlabel('Faultyacc2')
plt.ylabel('Frequency')
plt.legend()
plt.title('Histogram of Faultyacc2')
plt.show()

import matplotlib.pyplot as plt
# Plot histogram of Normalacc1
plt.hist(normal_data['Normalacc1'], bins=20, color='green', alpha=0.7, label='Normal')
plt.xlabel('Normalacc1')
plt.ylabel('Frequency')
plt.legend()
plt.title('Histogram of Normalacc1')
plt.show()

import matplotlib.pyplot as plt
# Plot histogram of Normalacc2
plt.hist(normal_data['Normalacc2'], bins=20, color='green', alpha=0.7, label='Normal')
plt.xlabel('Normalacc2')
plt.ylabel('Frequency')
plt.legend()
plt.title('Histogram of Normalacc2')
plt.show()

# Box plot of Normalacc1 and Faultyacc1
data = [normal_data['Normalacc1'], faulty_data['Faultyacc1']]
labels = ['Normal', 'Faulty']
plt.boxplot(data, labels=labels)
plt.xlabel('Acceleration Type')
plt.ylabel('Acceleration Value')
plt.title('Box plot of Normalacc2 and Faultyacc2')
plt.show()

# Box plot of Normalacc2 and Faultyacc2
data = [normal_data['Normalacc2'], faulty_data['Faultyacc2']]
labels = ['Normal', 'Faulty']
plt.boxplot(data, labels=labels)
plt.xlabel('Acceleration Type')
plt.ylabel('Acceleration Value')
plt.title('Box plot of Normalacc2 and Faultyacc2')
plt.show()

import matplotlib.pyplot as plt

# Plot line graph of Normalacc1 vs Faultyacc1
plt.plot(normal_data['Normalacc1'], label='Normal')
plt.plot(faulty_data['Faultyacc1'], label='Faulty')
plt.xlabel('Index')
plt.ylabel('Acceleration')
plt.legend()
plt.title('Normalacc1 vs Faultyacc1')
plt.show()

import matplotlib.pyplot as plt

# Plot line graph of Normalacc1 vs Faultyacc1
plt.plot(normal_data['Normalacc2'], label='Normal')
plt.plot(faulty_data['Faultyacc2'], label='Faulty')
plt.xlabel('Index')
plt.ylabel('Acceleration')
plt.legend()
plt.title('Normalacc2 vs Faultyacc2')
plt.show()
